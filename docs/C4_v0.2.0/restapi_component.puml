@startuml C4_Component_RestAPI
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
skinparam linetype ortho
skinparam ranksep 200
skinparam nodesep 200
top to bottom direction
Container_Boundary(restapi, "REST API Macroservice (NestJS)") {
  Component(auth_controller, "AuthController", "NestJS Controller", "Auth endpoints: GET /auth/google/url, POST /auth/google/callback, GET /auth/me, POST /auth/logout")
  Component(restapi_controller, "RestApiController", "NestJS Controller", "REST endpoints: POST /restapi/stalking-request, POST /restapi/send-message (protected by JWT)")
  Component(favorites_controller, "FavoritesController", "NestJS Controller", "Favorites endpoints: GET /favorites, POST /favorites, DELETE /favorites/:listingId (protected by JWT)")
  Component(chat_controller, "ChatController", "NestJS Controller", "Chat endpoints: GET /chats, GET /chats/:chatId/listings (protected by JWT & ResourceOwnershipGuard)")
  Component(messages_controller, "MessagesController", "NestJS Controller", "Messages endpoints: GET /messages/chat/:chatId (protected by JWT & ResourceOwnershipGuard)")
  Component(user_profile_controller, "UserProfileController", "NestJS Controller", "User Profile endpoints: GET /user-profiles, GET /user-profiles/:profileId (protected by JWT & ResourceOwnershipGuard)")
  Component(sse_controller, "SSEController", "NestJS Controller", "SSE endpoint: GET /sse?clientId=...")
  Component(jwt_auth_guard, "JwtAuthGuard", "NestJS Guard", "Validates JWT tokens from httpOnly cookies")
  Component(resource_ownership_guard, "ResourceOwnershipGuard", "NestJS Guard", "Validates user owns requested resource (CHAT, LISTING, MESSAGE, USER_PROFILE)")
  Component(validate_google_token_handler, "ValidateGoogleTokenHandler", "CQRS Command Handler", "Validates Google OAuth code and creates/updates user")
  Component(google_service, "GoogleService", "NestJS Service", "Handles Google OAuth flow and token exchange")
  Component(start_command_handler, "StartProcessingHandler", "CQRS Command Handler", "Initiates stalking and chat flows")
  Component(send_message_handler, "SendUserMessageHandler", "CQRS Command Handler", "Handles user chat messages")
  Component(gift_ready_handler, "GiftReadyHandler", "Event Handler", "Handles GiftReadyEvent from RabbitMQ and saves listings to database")
  Component(save_listings_handler, "SaveListingsHandler", "CQRS Command Handler", "Persists product listings to database")
  Component(add_to_favorites_handler, "AddToFavoritesHandler", "CQRS Command Handler", "Adds listing to user favorites")
  Component(remove_from_favorites_handler, "RemoveFromFavoritesHandler", "CQRS Command Handler", "Removes listing from user favorites")
  Component(get_user_favorites_handler, "GetUserFavoritesHandler", "CQRS Query Handler", "Retrieves user's favorite listings")
  Component(get_chat_listings_handler, "GetChatListingsHandler", "CQRS Query Handler", "Retrieves listings for a specific chat")
  Component(get_user_chats_handler, "GetUserChatsHandler", "CQRS Query Handler", "Retrieves all chats for a user")
  Component(get_chat_messages_handler, "GetChatMessagesHandler", "CQRS Query Handler", "Retrieves messages for a specific chat")
  Component(save_message_handler, "SaveMessageHandler", "CQRS Command Handler", "Persists chat messages to database")
  Component(save_user_profile_handler, "SaveUserProfileHandler", "CQRS Command Handler", "Persists user profile from chat analysis")
  Component(get_user_profiles_handler, "GetUserProfilesHandler", "CQRS Query Handler", "Retrieves all user profiles for a user")
  Component(get_user_profile_by_id_handler, "GetUserProfileByIdHandler", "CQRS Query Handler", "Retrieves specific user profile by ID")
  Component(chat_interview_completed_handler, "ChatInterviewCompletedHandler", "Event Handler", "Handles ChatInterviewCompletedEvent from RabbitMQ")
  Component(chat_question_handler, "ChatQuestionAskedHandler", "Event Handler", "Handles ChatQuestionAskedEvent from RabbitMQ")
  Component(chat_completed_handler, "ChatCompletedNotifyUserHandler", "Event Handler", "Handles ChatCompletedNotifyUserEvent from RabbitMQ")
  Component(chat_inappropriate_handler, "ChatInappropriateRequestHandler", "Event Handler", "Handles ChatInappropriateRequestEvent from RabbitMQ")
  Component(notify_user_handler, "NotifyUserSSEHandler", "CQRS Command Handler", "Sends SSE messages to users")
  Component(sse_service, "SSEService", "NestJS Service", "Manages SSE connections and message fanout")
  Component(user_repository, "UserRepository", "TypeORM Repository", "Persists and retrieves user data")
  Component(listing_repository, "ListingRepository", "TypeORM Repository", "Persists and retrieves product listings and favorites")
  Component(chat_repository, "ChatRepository", "TypeORM Repository", "Persists and retrieves chat sessions and messages")
  Component(message_repository, "MessageRepository", "TypeORM Repository", "Persists and retrieves chat messages")
  Component(user_profile_repository, "UserProfileRepository", "TypeORM Repository", "Persists and retrieves user profiles (stalking analysis results)")
}

Component_Ext(user, "User", "Browser/Client", "Authenticates, provides social links, chat messages, and manages favorites")
Component_Ext(google_oauth, "Google OAuth", "OAuth Provider", "Validates OAuth codes and returns user info")
Component_Ext(postgres, "PostgreSQL", "Database", "Stores user accounts, chats, messages, listings, and favorites")
Component_Ext(rabbitmq_out_stalking, "RabbitMQ", "Message Broker", "StalkingAnalyzeRequestedEvent queue")
Component_Ext(rabbitmq_out_chat_start, "RabbitMQ", "Message Broker", "ChatStartInterviewEvent queue")
Component_Ext(rabbitmq_out_chat_answer, "RabbitMQ", "Message Broker", "ChatUserAnsweredEvent queue")
Component_Ext(rabbitmq_in_question, "RabbitMQ", "Message Broker", "ChatQuestionAskedEvent queue")
Component_Ext(rabbitmq_in_gift, "RabbitMQ", "Message Broker", "GiftReadyEvent queue")
Component_Ext(rabbitmq_in_completed_notify, "RabbitMQ", "Message Broker", "ChatCompletedNotifyUserEvent queue")
Component_Ext(rabbitmq_in_interview_completed, "RabbitMQ", "Message Broker", "ChatInterviewCompletedEvent queue")
Component_Ext(rabbitmq_in_inappropriate, "RabbitMQ", "Message Broker", "ChatInappropriateRequestEvent queue")

Rel(user, auth_controller, "GET /auth/google/url", "HTTPS")
Rel(auth_controller, google_service, "Gets OAuth URL")
Rel(user, auth_controller, "POST /auth/google/callback", "HTTPS/JSON")
Rel(auth_controller, validate_google_token_handler, "Dispatches command", "CQRS CommandBus")
Rel(validate_google_token_handler, google_service, "Validates OAuth code")
Rel(google_service, google_oauth, "Exchanges code for token", "HTTPS")
Rel(validate_google_token_handler, user_repository, "Creates/updates user")
Rel(user_repository, postgres, "Persists user", "Prisma/SQL")
Rel(auth_controller, user, "Sets JWT in httpOnly cookie", "Set-Cookie")
Rel(user, auth_controller, "GET /auth/me", "HTTPS with cookie")
Rel(auth_controller, user_repository, "Retrieves user info")
Rel(user, auth_controller, "POST /auth/logout", "HTTPS")

Rel(user, restapi_controller, "POST /restapi/stalking-request (with JWT cookie)", "HTTPS/JSON")
Rel(user, restapi_controller, "POST /restapi/send-message (with JWT cookie)", "HTTPS/JSON")
Rel(restapi_controller, jwt_auth_guard, "Validates JWT")
Rel(jwt_auth_guard, user_repository, "Verifies user exists")
Rel(user, sse_controller, "GET /sse?clientId=...", "HTTPS/SSE")
Rel(sse_controller, sse_service, "Registers client")
Rel(sse_service, user, "Sends real-time updates", "SSE")

Rel(restapi_controller, start_command_handler, "Dispatches command", "CQRS CommandBus")
Rel(start_command_handler, rabbitmq_out_stalking, "Publishes StalkingAnalyzeRequestedEvent", "AMQP ClientProxy.emit")
Rel(start_command_handler, rabbitmq_out_chat_start, "Publishes ChatStartInterviewEvent", "AMQP ClientProxy.emit")

Rel(restapi_controller, send_message_handler, "Dispatches command", "CQRS CommandBus")
Rel(send_message_handler, rabbitmq_out_chat_answer, "Publishes ChatUserAnsweredEvent", "AMQP ClientProxy.emit")

Rel(rabbitmq_in_question, chat_question_handler, "Consumes event", "AMQP @EventPattern")
Rel(rabbitmq_in_gift, gift_ready_handler, "Consumes event", "AMQP @EventPattern")
Rel(rabbitmq_in_completed_notify, chat_completed_handler, "Consumes event", "AMQP @EventPattern")
Rel(rabbitmq_in_interview_completed, chat_interview_completed_handler, "Consumes event", "AMQP @EventPattern")
Rel(rabbitmq_in_inappropriate, chat_inappropriate_handler, "Consumes event", "AMQP @EventPattern")

Rel(gift_ready_handler, save_listings_handler, "Dispatches SaveListingsCommand", "CQRS CommandBus")
Rel(save_listings_handler, listing_repository, "Persists listings")
Rel(save_listings_handler, chat_repository, "Associates listings with chat")
Rel(listing_repository, postgres, "SQL queries", "TypeORM")
Rel(chat_repository, postgres, "SQL queries", "TypeORM")
Rel(gift_ready_handler, notify_user_handler, "Dispatches NotifyUserSseCommand", "CQRS CommandBus")
Rel(chat_question_handler, notify_user_handler, "Dispatches NotifyUserSseCommand", "CQRS CommandBus")
Rel(chat_question_handler, save_message_handler, "Dispatches SaveMessageCommand", "CQRS CommandBus")
Rel(save_message_handler, message_repository, "Persists message")
Rel(message_repository, postgres, "SQL queries", "TypeORM")
Rel(chat_completed_handler, notify_user_handler, "Dispatches NotifyUserSseCommand", "CQRS CommandBus")
Rel(chat_inappropriate_handler, notify_user_handler, "Dispatches NotifyUserSseCommand", "CQRS CommandBus")
Rel(chat_interview_completed_handler, save_user_profile_handler, "Dispatches SaveUserProfileCommand", "CQRS CommandBus")
Rel(save_user_profile_handler, user_profile_repository, "Persists user profile")
Rel(user_profile_repository, postgres, "SQL queries", "TypeORM")

Rel(notify_user_handler, sse_service, "Sends message")

Rel(user, favorites_controller, "POST /favorites {listingId} (with JWT cookie)", "HTTPS/JSON")
Rel(user, favorites_controller, "DELETE /favorites/:listingId (with JWT cookie)", "HTTPS/JSON")
Rel(user, favorites_controller, "GET /favorites (with JWT cookie)", "HTTPS/JSON")
Rel(favorites_controller, jwt_auth_guard, "Validates JWT")
Rel(favorites_controller, add_to_favorites_handler, "Dispatches AddToFavoritesCommand", "CQRS CommandBus")
Rel(favorites_controller, remove_from_favorites_handler, "Dispatches RemoveFromFavoritesCommand", "CQRS CommandBus")
Rel(favorites_controller, get_user_favorites_handler, "Dispatches GetUserFavoritesQuery", "CQRS QueryBus")
Rel(add_to_favorites_handler, listing_repository, "Adds to user favorites")
Rel(remove_from_favorites_handler, listing_repository, "Removes from user favorites")
Rel(get_user_favorites_handler, listing_repository, "Retrieves user favorites")

Rel(user, chat_controller, "GET /chats (with JWT cookie)", "HTTPS/JSON")
Rel(user, chat_controller, "GET /chats/:chatId/listings (with JWT cookie)", "HTTPS/JSON")
Rel(chat_controller, jwt_auth_guard, "Validates JWT")
Rel(chat_controller, resource_ownership_guard, "Validates resource ownership")
Rel(resource_ownership_guard, chat_repository, "Verifies chat ownership")
Rel(resource_ownership_guard, listing_repository, "Verifies listing ownership")
Rel(resource_ownership_guard, message_repository, "Verifies message ownership")
Rel(resource_ownership_guard, user_profile_repository, "Verifies user profile ownership")
Rel(chat_controller, get_user_chats_handler, "Dispatches GetUserChatsQuery", "CQRS QueryBus")
Rel(chat_controller, get_chat_listings_handler, "Dispatches GetChatListingsQuery", "CQRS QueryBus")
Rel(get_user_chats_handler, chat_repository, "Retrieves user chats")
Rel(get_chat_listings_handler, chat_repository, "Retrieves chat listings")

Rel(user, messages_controller, "GET /messages/chat/:chatId (with JWT cookie)", "HTTPS/JSON")
Rel(messages_controller, jwt_auth_guard, "Validates JWT")
Rel(messages_controller, resource_ownership_guard, "Validates chat ownership")
Rel(messages_controller, get_chat_messages_handler, "Dispatches GetChatMessagesQuery", "CQRS QueryBus")
Rel(get_chat_messages_handler, message_repository, "Retrieves chat messages")

Rel(user, user_profile_controller, "GET /user-profiles (with JWT cookie)", "HTTPS/JSON")
Rel(user, user_profile_controller, "GET /user-profiles/:profileId (with JWT cookie)", "HTTPS/JSON")
Rel(user_profile_controller, jwt_auth_guard, "Validates JWT")
Rel(user_profile_controller, resource_ownership_guard, "Validates profile ownership")
Rel(user_profile_controller, get_user_profiles_handler, "Dispatches GetUserProfilesQuery", "CQRS QueryBus")
Rel(user_profile_controller, get_user_profile_by_id_handler, "Dispatches GetUserProfileByIdQuery", "CQRS QueryBus")
Rel(get_user_profiles_handler, user_profile_repository, "Retrieves user profiles")
Rel(get_user_profile_by_id_handler, user_profile_repository, "Retrieves user profile by ID")

SHOW_LEGEND()
@enduml
