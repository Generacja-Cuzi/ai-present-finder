/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the welcome message for the Gift microservice */
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint */
        get: operations["AppController_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/restapi/stalking-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request stalking analysis for provided social profiles */
        post: operations["RestApiController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/restapi/send-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send chat messages to the system */
        post: operations["RestApiController_sendMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Google OAuth URL */
        get: operations["AuthController_getGoogleAuthUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Handle Google OAuth callback */
        post: operations["AuthController_googleCallback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout user by clearing auth cookie */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user from cookie */
        get: operations["AuthController_getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's chat history */
        get: operations["ChatController_getUserChats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Subscribe to server-sent events stream */
        get: operations["SseController_sse"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        StalkingAnalyzeRequestDto: {
            /**
             * @description Instagram profile URL
             * @example https://instagram.com/example
             */
            instagramUrl?: string;
            /**
             * @description TikTok profile URL
             * @example https://tiktok.com/@example
             */
            tiktokUrl?: string;
            /**
             * @description X (Twitter) profile URL
             * @example https://x.com/example
             */
            xUrl?: string;
            /**
             * @description Occasion
             * @example birthday
             */
            occasion: string;
            /**
             * @description Chat identifier
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            chatId: string;
        };
        ChatMessageDto: {
            /**
             * @description Unique message identifier
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            id: string;
            /**
             * @description Message content
             * @example Hello!
             */
            content: string;
            /**
             * @description Message sender
             * @example user
             * @enum {string}
             */
            sender: "user" | "assistant";
        };
        SendMessageDto: {
            /** @description Messages in the conversation */
            messages: components["schemas"]["ChatMessageDto"][];
            /**
             * @description Chat identifier
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            chatId: string;
        };
        GoogleAuthUrlDto: {
            /**
             * @description Google OAuth authorization URL
             * @example https://accounts.google.com/o/oauth2/v2/auth?...
             */
            url: string;
        };
        GoogleAuthDto: {
            /**
             * @description Google OAuth authorization code
             * @example 4/0AY0e-g7...
             */
            code: string;
        };
        UserDto: {
            /**
             * @description User ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description User email
             * @example user@example.com
             */
            email: string;
            /**
             * @description User name
             * @example John Doe
             */
            name: string | null;
        };
        AuthResponseDto: {
            /**
             * @description JWT access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            accessToken: string;
            /** @description User information */
            user: components["schemas"]["UserDto"];
        };
        ChatsResponseDto: {
            /** @description List of user's chats */
            chats: unknown[][];
        };
        SseChatbotMessageDto: {
            /**
             * @example chatbot-message
             * @enum {string}
             */
            type: "chatbot-message";
            /**
             * @description Chat message from the bot
             * @example {
             *       "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
             *       "content": "Hello!",
             *       "sender": "user"
             *     }
             */
            message: components["schemas"]["ChatMessageDto"];
        };
        SseChatInterviewCompletedDto: {
            /**
             * @example chat-interview-completed
             * @enum {string}
             */
            type: "chat-interview-completed";
        };
        SseChatInappropriateRequestDto: {
            /**
             * @example chat-inappropriate-request
             * @enum {string}
             */
            type: "chat-inappropriate-request";
            /**
             * @description Reason why the request was inappropriate
             * @example inappropriate content
             */
            reason: string;
        };
        PriceDto: {
            /**
             * @description Price value
             * @example 10
             */
            value: number;
            /**
             * @description Price label
             * @example 10
             */
            label: string;
            /**
             * @description Currency
             * @example USD
             */
            currency: string;
            /**
             * @description Whether price is negotiable
             * @example false
             */
            negotiable: boolean;
        };
        ListingDto: {
            /**
             * @description Image URL
             * @example https://example.com/image.jpg
             */
            image: string;
            /**
             * @description Title
             * @example Book
             */
            title: string;
            /**
             * @description Description
             * @example Great book
             */
            description: string;
            /**
             * @description Link
             * @example https://example.com/book
             */
            link: string;
            /**
             * @description Price
             * @example {
             *       "value": 10,
             *       "label": "10",
             *       "currency": "USD",
             *       "negotiable": false
             *     }
             */
            price: components["schemas"]["PriceDto"];
        };
        SseGiftReadyDto: {
            /**
             * @example gift-ready
             * @enum {string}
             */
            type: "gift-ready";
            /**
             * @description Gift ideas payload
             * @example {
             *       "giftIdeas": [
             *         {
             *           "image": "https://example.com/image.jpg",
             *           "title": "Book",
             *           "description": "Great book",
             *           "link": "https://example.com/book"
             *         },
             *         {
             *           "image": "https://example.com/image.jpg",
             *           "title": "Pen",
             *           "description": "Great pen",
             *           "link": "https://example.com/pen"
             *         }
             *       ]
             *     }
             */
            data: components["schemas"]["ListingDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a welcome message from the Gift service */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    AppController_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns service health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    RestApiController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StalkingAnalyzeRequestDto"];
            };
        };
        responses: {
            /** @description Analysis requested */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestApiController_sendMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendMessageDto"];
            };
        };
        responses: {
            /** @description Message accepted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getGoogleAuthUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns Google OAuth authorization URL */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleAuthUrlDto"];
                };
            };
        };
    };
    AuthController_googleCallback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleAuthDto"];
            };
        };
        responses: {
            /** @description Sets JWT token in httpOnly cookie and returns user info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponseDto"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully logged out */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns current user info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChatController_getUserChats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of user's chats */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatsResponseDto"];
                };
            };
        };
    };
    SseController_sse: {
        parameters: {
            query: {
                /** @description Client identifier to register for SSE */
                clientId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event stream of SSE messages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
