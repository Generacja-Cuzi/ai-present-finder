name: CI

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Setup PostgreSQL
        uses: ./.github/actions/setup-postgres
        with:
          container-name: "postgres-ci-lint"

      - name: Write Google credentials file
        shell: bash
        env:
          GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
        run: |
          set -euo pipefail
          # bezpieczne zapisanie wielolinijkowego JSON
          printf '%s' "$GCP_SA_JSON" > "$RUNNER_TEMP/gcp-sa.json"
          chmod 600 "$RUNNER_TEMP/gcp-sa.json"

      - name: Install dependencies
        run: |
          export GOOGLE_CREDENTIALS_PATH="${{ runner.temp }}/gcp-sa.json"
          export GOOGLE_SCOPES_API="https://www.googleapis.com/auth/userinfo.email,https://www.googleapis.com/auth/userinfo.profile"
          pnpm install --frozen-lockfile

      - name: Run prettier
        run: pnpm run format:check
        if: always()

      - name: Run Lint
        run: pnpm run lint
        if: always()

      - name: Run typecheck
        run: pnpm run typecheck
        if: always()

      - name: Run tests
        run: pnpm -r --filter '!fetch-microservice' test
        if: always()

      - name: Build
        run: pnpm run build
        if: always()

      - name: Run commitlint check
        if: always() && github.event_name == 'pull_request'
        run: npx commitlint -f ${{ github.event.pull_request.base.sha }}

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull rabbitmq alpine image
        run: docker pull rabbitmq:3.12.11-alpine

      - name: Setup PostgreSQL
        uses: ./.github/actions/setup-postgres
        with:
          container-name: "postgres-ci-test"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Write Google credentials file
        shell: bash
        env:
          GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
        run: |
          set -euo pipefail
          printf '%s' "$GCP_SA_JSON" > "$RUNNER_TEMP/gcp-sa.json"
          chmod 600 "$RUNNER_TEMP/gcp-sa.json"

      - name: Install dependencies
        run: |
          export GOOGLE_CREDENTIALS_PATH="${{ runner.temp }}/gcp-sa.json"
          export GOOGLE_SCOPES_API="https://www.googleapis.com/auth/userinfo.email,https://www.googleapis.com/auth/userinfo.profile"
          pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm -r --filter '!fetch-microservice' test

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PostgreSQL
        uses: ./.github/actions/setup-postgres
        with:
          container-name: "postgres-ci-build"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Write Google credentials file
        shell: bash
        env:
          GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
        run: |
          set -euo pipefail
          printf '%s' "$GCP_SA_JSON" > "$RUNNER_TEMP/gcp-sa.json"
          chmod 600 "$RUNNER_TEMP/gcp-sa.json"

      - name: Install dependencies
        run: |
          export GOOGLE_CREDENTIALS_PATH="${{ runner.temp }}/gcp-sa.json"
          export GOOGLE_SCOPES_API="https://www.googleapis.com/auth/userinfo.email,https://www.googleapis.com/auth/userinfo.profile"
          pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker Compose configuration
        run: |
          cd deployment
          # Validate configuration can be parsed
          docker compose -f docker-compose.prod.yml --env-file .unencrypted-env.test config --quiet
          echo "‚úÖ Docker Compose configuration is valid"

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/Dockerfile
          push: false
          load: true
          tags: ai-present-finder:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/frontend.Dockerfile
          push: false
          load: true
          tags: ai-present-finder-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test backend container startup
        run: |
          # Start the backend container with minimal required env vars
          docker run -d --name test-backend \
            -e NODE_ENV=production \
            -e CLOUDAMQP_URL=amqp://guest:guest@localhost:5672 \
            -e OPENAI_API_KEY=sk-test-dummy-key \
            -e BRIGHTDATA_API_KEY=test-key \
            ai-present-finder:test

          # Wait for PM2 to start services
          sleep 10

          # Check if container is still running
          if docker ps | grep -q test-backend; then
            echo "‚úÖ Backend container is running"
            
            # Check PM2 process status
            echo "üìä PM2 process status:"
            docker exec test-backend pm2 list || echo "‚ö†Ô∏è  Could not get PM2 status"
            
            # Show logs
            echo "üìù Container logs (last 30 lines):"
            docker logs test-backend --tail=30
            
            docker stop test-backend
            docker rm test-backend
          else
            echo "‚ùå Backend container crashed"
            docker logs test-backend
            docker rm -f test-backend
            exit 1
          fi

      - name: Test frontend container startup
        run: |
          # Start the frontend container briefly to test it starts
          docker run --rm -d --name test-frontend -p 8080:80 ai-present-finder-frontend:test
          # Wait a moment for startup
          sleep 10
          # Check if container is still running (not crashed)
          if docker ps | grep -q test-frontend; then
            echo "‚úÖ Frontend container started successfully"
            # Test that nginx health endpoint is responding
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "‚úÖ Frontend HTTP health endpoint responding"
            else
              echo "‚ùå Frontend HTTP health endpoint not responding"
              docker logs test-frontend
              exit 1
            fi
            docker stop test-frontend
          else
            echo "‚ùå Frontend container failed to start"
            docker logs test-frontend
            exit 1
          fi

      - name: Validate Docker image security
        run: |
          echo "üîç Checking for security issues in Docker images..."

          # Check backend image
          echo "Backend image analysis:"
          docker run --rm ai-present-finder:test sh -c "
            echo 'Node version:' && node --version
            echo 'PM2 version:' && pm2 --version
            echo 'Checking for vulnerable packages...'
            if command -v npm >/dev/null 2>&1; then
              npm audit --audit-level=moderate --production || echo '‚ö†Ô∏è  Some moderate vulnerabilities found'
            fi
          " || echo "‚ö†Ô∏è  Could not run security checks on backend"

          # Check frontend image
          echo "Frontend image analysis:"
          docker run --rm ai-present-finder-frontend:test sh -c "
            echo 'Nginx version:' && nginx -v
            echo 'Checking nginx configuration...'
            nginx -t || exit 1
          " || echo "‚ö†Ô∏è  Could not run security checks on frontend"

      - name: Test Docker Compose services startup
        run: |
          cd deployment
          echo "üöÄ Testing Docker Compose services startup..."

          # Start services with production compose file
          docker compose -f docker-compose.prod.yml --env-file .unencrypted-env.test up -d --wait

          # Clean up
          echo "üßπ Cleaning up..."
          docker compose -f docker-compose.prod.yml --env-file .unencrypted-env.test down -v

  docker-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Hadolint
        run: |
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/

      - name: Lint backend Dockerfile
        run: hadolint deployment/Dockerfile
        if: always()

      - name: Lint frontend Dockerfile
        run: hadolint deployment/frontend.Dockerfile
        if: always()

      - name: Validate Docker Compose schema
        if: always()
        run: |
          # Install dependencies for schema validation
          python -m pip install --upgrade pip
          python -m pip install pyyaml jsonschema

          # Validate docker-compose.prod.yml
          cd deployment
          python - <<'PYTHON'
          import yaml
          import jsonschema
          from urllib.request import urlopen

          # Load compose file
          with open('docker-compose.prod.yml', 'r', encoding='utf-8') as f:
              compose = yaml.safe_load(f)

          # Load schema
          schema_url = 'https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json'
          with urlopen(schema_url) as response:
              schema = yaml.safe_load(response)

          # Validate
          jsonschema.validate(compose, schema)
          print('‚úÖ Docker Compose schema validation passed')
          PYTHON
