name: "Setup PostgreSQL for CI"
description: "Sets up PostgreSQL database with required databases for microservices"
inputs:
  container-name:
    description: "Name for the PostgreSQL container"
    required: true
    default: "postgres-ci"
  postgres-user:
    description: "PostgreSQL username"
    required: false
    default: "postgres"
  postgres-password:
    description: "PostgreSQL password"
    required: false
    default: "test_password"
  postgres-db:
    description: "Default PostgreSQL database"
    required: false
    default: "postgres"
  postgres-version:
    description: "PostgreSQL version"
    required: false
    default: "16"
  port:
    description: "Port to expose PostgreSQL on"
    required: false
    default: "5432"
  databases:
    description: "Comma-separated list of databases to create"
    required: false
    default: "reranking_service,fetch_service,stalking_service,chat_service,gift_ideas_service"

runs:
  using: "composite"
  steps:
    - name: Start PostgreSQL container
      shell: bash
      run: |
        echo "🚀 Starting PostgreSQL ${{ inputs.postgres-version }} container..."
        docker run -d --name ${{ inputs.container-name }} \
          -e POSTGRES_USER=${{ inputs.postgres-user }} \
          -e POSTGRES_PASSWORD=${{ inputs.postgres-password }} \
          -e POSTGRES_DB=${{ inputs.postgres-db }} \
          -e POSTGRES_MULTIPLE_DATABASES=${{ inputs.databases }} \
          -p ${{ inputs.port }}:5432 \
          postgres:${{ inputs.postgres-version }}

        echo "⏳ Waiting for PostgreSQL to be ready..."
        timeout=60
        elapsed=0
        while [ $elapsed -lt $timeout ]; do
          if docker exec ${{ inputs.container-name }} pg_isready -U ${{ inputs.postgres-user }} > /dev/null 2>&1; then
            echo "✅ PostgreSQL is ready"
            break
          fi
          sleep 2
          elapsed=$((elapsed + 2))
        done

        if [ $elapsed -ge $timeout ]; then
          echo "❌ PostgreSQL failed to start within $timeout seconds"
          docker logs ${{ inputs.container-name }}
          exit 1
        fi

    - name: Create databases
      shell: bash
      run: |
        echo "📊 Creating required databases..."
        IFS=',' read -ra DB_ARRAY <<< "${{ inputs.databases }}"
        for db in "${DB_ARRAY[@]}"; do
          echo "Creating database: $db"
          docker exec ${{ inputs.container-name }} psql -U ${{ inputs.postgres-user }} -c "CREATE DATABASE $db;" || echo "Database $db may already exist"
        done
        echo "✅ All databases created successfully"

    - name: Set database environment variables
      shell: bash
      run: |
        echo "🔧 Setting up database environment variables..."
        echo "DATABASE_HOST=localhost" >> $GITHUB_ENV
        echo "DATABASE_PORT=${{ inputs.port }}" >> $GITHUB_ENV
        echo "DATABASE_USERNAME=${{ inputs.postgres-user }}" >> $GITHUB_ENV
        echo "DATABASE_PASSWORD=${{ inputs.postgres-password }}" >> $GITHUB_ENV
        echo "DATABASE_NAME=${{ inputs.postgres-db }}" >> $GITHUB_ENV
        echo "✅ Database environment variables set"
