/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the welcome message for the Gift microservice */
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint */
        get: operations["AppController_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/restapi/stalking-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request stalking analysis for provided social profiles */
        post: operations["RestApiController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/restapi/send-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send chat messages to the system */
        post: operations["RestApiController_sendMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Google OAuth URL */
        get: operations["AuthController_getGoogleAuthUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Handle Google OAuth callback */
        post: operations["AuthController_googleCallback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout user by clearing auth cookie */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user from cookie */
        get: operations["AuthController_getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's chat history */
        get: operations["ChatController_getUserChats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chats/{chatId}/listings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get listings for a specific chat */
        get: operations["ChatController_getChatListings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all favorite listings for the current user */
        get: operations["FavoritesController_getFavorites"];
        put?: never;
        /** Add a listing to favorites */
        post: operations["FavoritesController_addToFavorites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favorites/{listingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a listing from favorites */
        delete: operations["FavoritesController_removeFromFavorites"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/chat/{chatId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all messages for a specific chat */
        get: operations["MessagesController_getChatMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all user profiles */
        get: operations["UserProfileController_getUserProfiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-profiles/{profileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific user profile */
        get: operations["UserProfileController_getUserProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Subscribe to server-sent events stream */
        get: operations["SseController_sse"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PotencialAnswerChoiceDto: {
            /**
             * @description Answer full sentence
             * @example Answer 1
             */
            answerFullSentence: string;
            /**
             * @description Answer short form
             * @example Short answer
             */
            answerShortForm: string;
        };
        PotencialAnswersSelectDto: {
            /**
             * @description Type of potential answers
             * @example select
             * @enum {string}
             */
            type: "select";
            /** @description Array of potential answers */
            answers: components["schemas"]["PotencialAnswerChoiceDto"][];
        };
        PotencialAnswersFreeTextDto: {
            /**
             * @description Type of potential answers
             * @example long_free_text
             * @enum {string}
             */
            type: "long_free_text";
        };
        StalkingAnalyzeRequestDto: {
            /**
             * @description Instagram profile URL
             * @example https://instagram.com/example
             */
            instagramUrl?: string;
            /**
             * @description TikTok profile URL
             * @example https://tiktok.com/@example
             */
            tiktokUrl?: string;
            /**
             * @description X (Twitter) profile URL
             * @example https://x.com/example
             */
            xUrl?: string;
            /**
             * @description Occasion
             * @example birthday
             */
            occasion: string;
            /**
             * @description Chat identifier
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            chatId: string;
            /**
             * @description Optional user profile ID to load existing profile
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            profileId?: string;
        };
        ChatMessageDto: {
            /**
             * @description Unique message identifier
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            id: string;
            /**
             * @description Message content
             * @example Hello!
             */
            content: string;
            /**
             * @description Message sender
             * @example user
             * @enum {string}
             */
            sender: "user" | "assistant";
        };
        SendMessageDto: {
            /** @description Messages in the conversation */
            messages: components["schemas"]["ChatMessageDto"][];
            /**
             * @description Chat identifier
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            chatId: string;
        };
        GoogleAuthUrlDto: {
            /**
             * @description Google OAuth authorization URL
             * @example https://accounts.google.com/o/oauth2/v2/auth?...
             */
            url: string;
        };
        GoogleAuthDto: {
            /**
             * @description Google OAuth authorization code
             * @example 4/0AY0e-g7...
             */
            code: string;
        };
        /**
         * @description User role
         * @enum {string}
         */
        UserRole: "user" | "admin";
        UserDto: {
            /**
             * @description User ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description User email
             * @example user@example.com
             */
            email: string;
            /**
             * @description User name
             * @example John Doe
             */
            name: string | null;
            /**
             * @description User role
             * @example user
             */
            role: components["schemas"]["UserRole"];
        };
        AuthResponseDto: {
            /**
             * @description JWT access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            accessToken: string;
            /** @description User information */
            user: components["schemas"]["UserDto"];
        };
        ChatDto: {
            /**
             * @description Chat ID
             * @example cm123abc
             */
            chatId: string;
            /**
             * @description Chat name
             * @example Gift for Mom
             */
            chatName: string;
            /**
             * Format: date-time
             * @description Created at timestamp
             * @example 2025-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * @description Whether the chat interview has been completed
             * @example false
             */
            isInterviewCompleted: boolean;
        };
        ChatsResponseDto: {
            /** @description List of user's chats */
            chats: components["schemas"]["ChatDto"][];
        };
        PriceDto: {
            /**
             * @description Price value
             * @example 10
             */
            value: number | null;
            /**
             * @description Price label
             * @example 10
             */
            label: string | null;
            /**
             * @description Currency
             * @example USD
             */
            currency: string | null;
            /**
             * @description Whether price is negotiable
             * @example false
             */
            negotiable: boolean | null;
        };
        ListingResponseDto: {
            /**
             * @description Image URL
             * @example https://example.com/image.jpg
             */
            image: string | null;
            /**
             * @description Title
             * @example Book
             */
            title: string;
            /**
             * @description Description
             * @example Great book
             */
            description: string;
            /**
             * @description Link
             * @example https://example.com/book
             */
            link: string;
            /**
             * @description Price
             * @example {
             *       "value": 10,
             *       "label": "10",
             *       "currency": "USD",
             *       "negotiable": false
             *     }
             */
            price: components["schemas"]["PriceDto"];
            /**
             * @description Category
             * @example Elektronika
             */
            category?: string | null;
            /**
             * @description Provider/shop name
             * @example amazon
             */
            provider?: string;
            /**
             * @description Listing ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Chat ID this listing belongs to
             * @example cm123abc
             */
            chatId: string | null;
            /**
             * @description Whether this listing is favorited by the current user
             * @example true
             */
            isFavorited: boolean;
            /**
             * Format: date-time
             * @description Created at timestamp
             * @example 2025-01-15T10:30:00Z
             */
            createdAt: string;
        };
        ChatListingsResponseDto: {
            /** @description List of listings for the chat */
            listings: components["schemas"]["ListingResponseDto"][];
        };
        FavoritesResponseDto: {
            /** @description List of favorite listings */
            favorites: components["schemas"]["ListingResponseDto"][];
        };
        AddToFavoritesDto: {
            /**
             * @description Listing ID to add to favorites
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            listingId: string;
        };
        /**
         * @description Message role
         * @enum {string}
         */
        MessageRole: "user" | "assistant" | "system";
        ProposedAnswerDto: {
            /**
             * @description Full sentence answer
             * @example Yes, I love it!
             */
            answerFullSentence: string;
            /**
             * @description Short form answer
             * @example Yes
             */
            answerShortForm: string;
        };
        ProposedAnswersDto: {
            /**
             * @description Type of proposed answers
             * @example select
             * @enum {string}
             */
            type: "select" | "long_free_text";
            /** @description List of proposed answers */
            answers?: components["schemas"]["ProposedAnswerDto"][];
        };
        MessageDto: {
            /**
             * @description Message ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Chat ID
             * @example cm123abc
             */
            chatId: string;
            /**
             * @description Message role
             * @example user
             */
            role: components["schemas"]["MessageRole"];
            /**
             * @description Message content
             * @example I'm looking for a gift for my mom
             */
            content: string;
            /** @description Proposed answers for this message */
            proposedAnswers?: components["schemas"]["ProposedAnswersDto"];
            /**
             * Format: date-time
             * @description Created at timestamp
             * @example 2025-01-15T10:30:00Z
             */
            createdAt: string;
        };
        ChatMessagesResponseDto: {
            /** @description List of chat messages */
            messages: components["schemas"]["MessageDto"][];
        };
        RecipientPersonalInfo: {
            person_name?: string | null;
            relationship?: string | null;
            occasion?: string | null;
            age_range?: string | null;
        };
        RecipientLifestyle: {
            primary_hobbies?: string[] | null;
            daily_routine?: string | null;
            relaxation_methods?: string[] | null;
            work_style?: string | null;
        };
        RecipientPreferences: {
            home_aesthetic?: string | null;
            valued_items?: string[] | null;
            favorite_beverages?: string[] | null;
            comfort_foods?: string[] | null;
        };
        RecipientMediaInterests: {
            favorite_books?: string[] | null;
            must_watch_shows?: string[] | null;
            podcasts?: string[] | null;
            music_preferences?: string[] | null;
        };
        RecipientRecentLife: {
            new_experiences?: string[] | null;
            mentioned_needs?: string[] | null;
            recent_achievements?: string[] | null;
        };
        RecipientGiftContext: {
            occasion_significance?: string | null;
            gift_message?: string | null;
            previous_gift_successes?: string[] | null;
        };
        RecipientProfileDto: {
            personal_info: components["schemas"]["RecipientPersonalInfo"];
            lifestyle: components["schemas"]["RecipientLifestyle"];
            preferences: components["schemas"]["RecipientPreferences"];
            media_interests: components["schemas"]["RecipientMediaInterests"];
            recent_life: components["schemas"]["RecipientRecentLife"];
            gift_context: components["schemas"]["RecipientGiftContext"];
        };
        UserProfileDto: {
            /**
             * @description Profile ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description User ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            userId: string;
            /**
             * @description Chat ID associated with this profile
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            chatId: string;
            /**
             * @description Name of the person
             * @example Mother
             */
            personName: string;
            /** @description Recipient profile data */
            profile: components["schemas"]["RecipientProfileDto"];
            /**
             * @description Key themes and keywords
             * @example [
             *       "cooking",
             *       "gardening",
             *       "relaxation"
             *     ]
             */
            keyThemes: string[];
            /**
             * Format: date-time
             * @description Profile creation date
             * @example 2023-01-01T00:00:00.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Profile last update date
             * @example 2023-01-01T00:00:00.000Z
             */
            updatedAt: string;
        };
        UserProfilesResponseDto: {
            /** @description List of user profiles */
            profiles: components["schemas"]["UserProfileDto"][];
        };
        ChatMessageWithAnswersDto: {
            /**
             * @description Unique message identifier
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            id: string;
            /**
             * @description Message content
             * @example Hello!
             */
            content: string;
            /**
             * @description Message sender
             * @example user
             * @enum {string}
             */
            sender: "user" | "assistant";
            /** @description Potential answers - either select with 4 options or free text */
            potentialAnswers?: components["schemas"]["PotencialAnswersSelectDto"] | components["schemas"]["PotencialAnswersFreeTextDto"];
        };
        SseChatbotMessageDto: {
            /**
             * @example chatbot-message
             * @enum {string}
             */
            type: "chatbot-message";
            /**
             * @description Chat message from the bot
             * @example {
             *       "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
             *       "content": "Hello!",
             *       "sender": "user",
             *       "potentialAnswers": {
             *         "type": "select",
             *         "answers": [
             *           {
             *             "answerFullSentence": "Answer 1",
             *             "answerShortForm": "Answer 1 short"
             *           }
             *         ]
             *       }
             *     }
             */
            message: components["schemas"]["ChatMessageWithAnswersDto"];
        };
        SseChatInterviewCompletedDto: {
            /**
             * @example chat-interview-completed
             * @enum {string}
             */
            type: "chat-interview-completed";
        };
        SseChatInappropriateRequestDto: {
            /**
             * @example chat-inappropriate-request
             * @enum {string}
             */
            type: "chat-inappropriate-request";
            /**
             * @description Reason why the request was inappropriate
             * @example inappropriate content
             */
            reason: string;
        };
        ListingWithIdDto: {
            /**
             * @description Image URL
             * @example https://example.com/image.jpg
             */
            image: string | null;
            /**
             * @description Title
             * @example Book
             */
            title: string;
            /**
             * @description Description
             * @example Great book
             */
            description: string;
            /**
             * @description Link
             * @example https://example.com/book
             */
            link: string;
            /**
             * @description Price
             * @example {
             *       "value": 10,
             *       "label": "10",
             *       "currency": "USD",
             *       "negotiable": false
             *     }
             */
            price: components["schemas"]["PriceDto"];
            /**
             * @description Category
             * @example Elektronika
             */
            category?: string | null;
            /**
             * @description Provider/shop name
             * @example amazon
             */
            provider?: string;
            /**
             * @description Listing ID from database
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            listingId: string;
        };
        SseGiftReadyDto: {
            /**
             * @example gift-ready
             * @enum {string}
             */
            type: "gift-ready";
            /**
             * @description Gift ideas payload with listing IDs
             * @example {
             *       "giftIdeas": [
             *         {
             *           "listingId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
             *           "image": "https://example.com/image.jpg",
             *           "title": "Book",
             *           "description": "Great book",
             *           "link": "https://example.com/book",
             *           "price": {
             *             "value": 10,
             *             "label": "10 USD",
             *             "currency": "USD",
             *             "negotiable": false
             *           },
             *           "category": "Muzyka i Edukacja"
             *         },
             *         {
             *           "listingId": "4ga85f64-5717-4562-b3fc-2c963f66afa7",
             *           "image": "https://example.com/image.jpg",
             *           "title": "Pen",
             *           "description": "Great pen",
             *           "link": "https://example.com/pen",
             *           "price": {
             *             "value": 5,
             *             "label": "5 USD",
             *             "currency": "USD",
             *             "negotiable": false
             *           },
             *           "category": "Moda"
             *         }
             *       ]
             *     }
             */
            data: components["schemas"]["ListingWithIdDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a welcome message from the Gift service */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    AppController_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns service health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    RestApiController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StalkingAnalyzeRequestDto"];
            };
        };
        responses: {
            /** @description Analysis requested */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestApiController_sendMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendMessageDto"];
            };
        };
        responses: {
            /** @description Message accepted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getGoogleAuthUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns Google OAuth authorization URL */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleAuthUrlDto"];
                };
            };
        };
    };
    AuthController_googleCallback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleAuthDto"];
            };
        };
        responses: {
            /** @description Sets JWT token in httpOnly cookie and returns user info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponseDto"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully logged out */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns current user info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChatController_getUserChats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of user's chats */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatsResponseDto"];
                };
            };
        };
    };
    ChatController_getChatListings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of listings with favorite status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatListingsResponseDto"];
                };
            };
        };
    };
    FavoritesController_getFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of favorite listings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FavoritesResponseDto"];
                };
            };
        };
    };
    FavoritesController_addToFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddToFavoritesDto"];
            };
        };
        responses: {
            /** @description Listing added to favorites */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FavoritesController_removeFromFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                listingId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Listing removed from favorites */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_getChatMessages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of chat messages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatMessagesResponseDto"];
                };
            };
        };
    };
    UserProfileController_getUserProfiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of user profiles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfilesResponseDto"];
                };
            };
        };
    };
    UserProfileController_getUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a user profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileDto"];
                };
            };
        };
    };
    SseController_sse: {
        parameters: {
            query: {
                /** @description Client identifier to register for SSE */
                clientId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event stream of SSE messages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
