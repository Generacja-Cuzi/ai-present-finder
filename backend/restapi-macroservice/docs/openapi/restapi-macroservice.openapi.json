{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a welcome message from the Gift service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Returns the welcome message for the Gift microservice",
        "tags": ["Gift"]
      }
    },
    "/health": {
      "get": {
        "operationId": "AppController_health",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns service health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Health check endpoint",
        "tags": ["Gift"]
      }
    },
    "/restapi/stalking-request": {
      "post": {
        "operationId": "RestApiController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StalkingAnalyzeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Analysis requested"
          }
        },
        "summary": "Request stalking analysis for provided social profiles",
        "tags": ["restapi"]
      }
    },
    "/restapi/send-message": {
      "post": {
        "operationId": "RestApiController_sendMessage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message accepted"
          }
        },
        "summary": "Send chat messages to the system",
        "tags": ["restapi"]
      }
    },
    "/auth/google/url": {
      "get": {
        "operationId": "AuthController_getGoogleAuthUrl",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns Google OAuth authorization URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleAuthUrlDto"
                }
              }
            }
          }
        },
        "summary": "Get Google OAuth URL",
        "tags": ["auth"]
      }
    },
    "/auth/google/callback": {
      "post": {
        "operationId": "AuthController_googleCallback",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleAuthDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sets JWT token in httpOnly cookie and returns user info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          }
        },
        "summary": "Handle Google OAuth callback",
        "tags": ["auth"]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully logged out"
          }
        },
        "summary": "Logout user by clearing auth cookie",
        "tags": ["auth"]
      }
    },
    "/auth/me": {
      "get": {
        "operationId": "AuthController_getCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns current user info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoDto"
                }
              }
            }
          }
        },
        "summary": "Get current user from cookie",
        "tags": ["auth"]
      }
    },
    "/chats": {
      "get": {
        "operationId": "ChatController_getUserChats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns list of user's chats",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get user's chat history",
        "tags": ["chats"]
      }
    },
    "/chats/{chatId}/listings": {
      "get": {
        "operationId": "ChatController_getChatListings",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of listings with favorite status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatListingsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get listings for a specific chat",
        "tags": ["chats"]
      }
    },
    "/favorites": {
      "get": {
        "operationId": "FavoritesController_getFavorites",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of favorite listings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoritesResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all favorite listings for the current user",
        "tags": ["favorites"]
      },
      "post": {
        "operationId": "FavoritesController_addToFavorites",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToFavoritesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listing added to favorites"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add a listing to favorites",
        "tags": ["favorites"]
      }
    },
    "/favorites/{listingId}": {
      "delete": {
        "operationId": "FavoritesController_removeFromFavorites",
        "parameters": [
          {
            "name": "listingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Listing removed from favorites"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove a listing from favorites",
        "tags": ["favorites"]
      }
    },
    "/feedback": {
      "post": {
        "operationId": "FeedbackController_createFeedback",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeedbackDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback successfully created"
          }
        },
        "summary": "Create feedback for a chat",
        "tags": ["feedback"]
      },
      "get": {
        "operationId": "FeedbackController_getAllFeedbacks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all feedbacks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeedbackResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all feedbacks (Admin only)",
        "tags": ["feedback"]
      }
    },
    "/feedback/chat/{chatId}": {
      "get": {
        "operationId": "FeedbackController_getFeedbackByChatId",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns feedback for the chat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Feedback not found for this chat"
          }
        },
        "summary": "Get feedback for a specific chat",
        "tags": ["feedback"]
      }
    },
    "/messages/chat/{chatId}": {
      "get": {
        "operationId": "MessagesController_getChatMessages",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of chat messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessagesResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all messages for a specific chat",
        "tags": ["messages"]
      }
    },
    "/user-profiles": {
      "get": {
        "operationId": "UserProfileController_getUserProfiles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns list of user profiles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfilesResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all user profiles",
        "tags": ["user-profiles"]
      }
    },
    "/user-profiles/{profileId}": {
      "get": {
        "operationId": "UserProfileController_getUserProfile",
        "parameters": [
          {
            "name": "profileId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDto"
                }
              }
            }
          }
        },
        "summary": "Get a specific user profile",
        "tags": ["user-profiles"]
      }
    },
    "/sse": {
      "get": {
        "operationId": "SseController_sse",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "query",
            "description": "Client identifier to register for SSE",
            "schema": {
              "example": "client-123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event stream of SSE messages"
          }
        },
        "summary": "Subscribe to server-sent events stream",
        "tags": ["sse"]
      }
    }
  },
  "info": {
    "title": "AI Present Finder - REST API",
    "description": "REST API for interacting with microservices: stalking requests, sending chat messages and streaming events via SSE.",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "components": {
    "schemas": {
      "PotencialAnswerChoiceDto": {
        "type": "object",
        "properties": {
          "answerFullSentence": {
            "type": "string",
            "description": "Answer full sentence",
            "example": "Answer 1"
          },
          "answerShortForm": {
            "type": "string",
            "description": "Answer short form",
            "example": "Short answer"
          }
        },
        "required": ["answerFullSentence", "answerShortForm"]
      },
      "PotencialAnswersSelectDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of potential answers",
            "enum": ["select"],
            "example": "select"
          },
          "answers": {
            "description": "Array of potential answers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PotencialAnswerChoiceDto"
            }
          }
        },
        "required": ["type", "answers"]
      },
      "PotencialAnswersFreeTextDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of potential answers",
            "enum": ["long_free_text"],
            "example": "long_free_text"
          }
        },
        "required": ["type"]
      },
      "StalkingAnalyzeRequestDto": {
        "type": "object",
        "properties": {
          "instagramUrl": {
            "type": "string",
            "description": "Instagram profile URL",
            "example": "https://instagram.com/example"
          },
          "tiktokUrl": {
            "type": "string",
            "description": "TikTok profile URL",
            "example": "https://tiktok.com/@example"
          },
          "xUrl": {
            "type": "string",
            "description": "X (Twitter) profile URL",
            "example": "https://x.com/example"
          },
          "occasion": {
            "type": "string",
            "description": "Occasion",
            "example": "birthday"
          },
          "chatId": {
            "type": "string",
            "description": "Chat identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "profileId": {
            "type": "string",
            "description": "Optional user profile ID to load existing profile",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        },
        "required": ["occasion", "chatId"]
      },
      "ChatMessageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique message identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "Hello!"
          },
          "sender": {
            "type": "string",
            "description": "Message sender",
            "enum": ["user", "assistant"],
            "example": "user"
          }
        },
        "required": ["id", "content", "sender"]
      },
      "SendMessageDto": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "Messages in the conversation",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessageDto"
            }
          },
          "chatId": {
            "type": "string",
            "description": "Chat identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        },
        "required": ["messages", "chatId"]
      },
      "GoogleAuthUrlDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Google OAuth authorization URL",
            "example": "https://accounts.google.com/o/oauth2/v2/auth?..."
          }
        },
        "required": ["url"]
      },
      "GoogleAuthDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Google OAuth authorization code",
            "example": "4/0AY0e-g7..."
          }
        },
        "required": ["code"]
      },
      "UserRole": {
        "type": "string",
        "enum": ["user", "admin"],
        "description": "User role"
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "John Doe",
            "nullable": true
          },
          "role": {
            "description": "User role",
            "example": "user",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              }
            ]
          }
        },
        "required": ["id", "email", "name", "role"]
      },
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "user": {
            "description": "User information",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDto"
              }
            ]
          }
        },
        "required": ["accessToken", "user"]
      },
      "UserInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "John Doe",
            "nullable": true
          },
          "role": {
            "type": "string",
            "description": "User role",
            "example": "user",
            "enum": ["user", "admin"]
          }
        },
        "required": ["id", "email", "name", "role"]
      },
      "ChatDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "description": "Chat ID",
            "example": "cm123abc"
          },
          "chatName": {
            "type": "string",
            "description": "Chat name",
            "example": "Gift for Mom"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at timestamp",
            "example": "2025-01-15T10:30:00Z"
          },
          "isInterviewCompleted": {
            "type": "boolean",
            "description": "Whether the chat interview has been completed",
            "example": false
          }
        },
        "required": ["chatId", "chatName", "createdAt", "isInterviewCompleted"]
      },
      "ChatsResponseDto": {
        "type": "object",
        "properties": {
          "chats": {
            "description": "List of user's chats",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatDto"
            }
          }
        },
        "required": ["chats"]
      },
      "PriceDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "Price value",
            "example": 10,
            "nullable": true
          },
          "label": {
            "type": "string",
            "description": "Price label",
            "example": "10",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD",
            "nullable": true
          },
          "negotiable": {
            "type": "boolean",
            "description": "Whether price is negotiable",
            "example": false,
            "nullable": true
          }
        },
        "required": ["value", "label", "currency", "negotiable"]
      },
      "ListingResponseDto": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "Image URL",
            "example": "https://example.com/image.jpg",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Book"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "example": "Great book"
          },
          "link": {
            "type": "string",
            "description": "Link",
            "example": "https://example.com/book"
          },
          "price": {
            "description": "Price",
            "example": {
              "value": 10,
              "label": "10",
              "currency": "USD",
              "negotiable": false
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceDto"
              }
            ]
          },
          "category": {
            "type": "string",
            "description": "Category",
            "example": "Elektronika",
            "nullable": true
          },
          "provider": {
            "type": "string",
            "description": "Provider/shop name",
            "example": "amazon"
          },
          "id": {
            "type": "string",
            "description": "Listing ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "chatId": {
            "type": "string",
            "description": "Chat ID this listing belongs to",
            "example": "cm123abc",
            "nullable": true
          },
          "isFavorited": {
            "type": "boolean",
            "description": "Whether this listing is favorited by the current user",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at timestamp",
            "example": "2025-01-15T10:30:00Z"
          }
        },
        "required": [
          "image",
          "title",
          "description",
          "link",
          "price",
          "id",
          "chatId",
          "isFavorited",
          "createdAt"
        ]
      },
      "ChatListingsResponseDto": {
        "type": "object",
        "properties": {
          "listings": {
            "description": "List of listings for the chat",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingResponseDto"
            }
          }
        },
        "required": ["listings"]
      },
      "FavoritesResponseDto": {
        "type": "object",
        "properties": {
          "favorites": {
            "description": "List of favorite listings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingResponseDto"
            }
          }
        },
        "required": ["favorites"]
      },
      "AddToFavoritesDto": {
        "type": "object",
        "properties": {
          "listingId": {
            "type": "string",
            "description": "Listing ID to add to favorites",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": ["listingId"]
      },
      "CreateFeedbackDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "description": "ID of the chat to provide feedback for",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "rating": {
            "type": "number",
            "description": "Rating from 1 to 5",
            "minimum": 1,
            "maximum": 5,
            "example": 5
          },
          "comment": {
            "type": "string",
            "description": "Optional comment about the chat experience",
            "example": "Great recommendations, very helpful!",
            "nullable": true
          }
        },
        "required": ["chatId", "rating"]
      },
      "FeedbackResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the feedback",
            "example": "550e8400-e29b-41d4-a716-446655440001"
          },
          "chatId": {
            "type": "string",
            "description": "ID of the chat this feedback is for",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user who provided the feedback",
            "example": "550e8400-e29b-41d4-a716-446655440002"
          },
          "rating": {
            "type": "number",
            "description": "Rating from 1 to 5",
            "example": 5
          },
          "comment": {
            "type": "string",
            "description": "Optional comment about the chat experience",
            "example": "Great recommendations, very helpful!",
            "nullable": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the feedback was created",
            "example": "2023-12-01T10:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the feedback was last updated",
            "example": "2023-12-01T10:00:00.000Z"
          }
        },
        "required": [
          "id",
          "chatId",
          "userId",
          "rating",
          "createdAt",
          "updatedAt"
        ]
      },
      "MessageRole": {
        "type": "string",
        "enum": ["user", "assistant", "system"],
        "description": "Message role"
      },
      "ProposedAnswerDto": {
        "type": "object",
        "properties": {
          "answerFullSentence": {
            "type": "string",
            "description": "Full sentence answer",
            "example": "Yes, I love it!"
          },
          "answerShortForm": {
            "type": "string",
            "description": "Short form answer",
            "example": "Yes"
          }
        },
        "required": ["answerFullSentence", "answerShortForm"]
      },
      "ProposedAnswersDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of proposed answers",
            "enum": ["select", "long_free_text"],
            "example": "select"
          },
          "answers": {
            "description": "List of proposed answers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProposedAnswerDto"
            }
          }
        },
        "required": ["type"]
      },
      "MessageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "chatId": {
            "type": "string",
            "description": "Chat ID",
            "example": "cm123abc"
          },
          "role": {
            "description": "Message role",
            "example": "user",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageRole"
              }
            ]
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "I'm looking for a gift for my mom"
          },
          "proposedAnswers": {
            "description": "Proposed answers for this message",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProposedAnswersDto"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at timestamp",
            "example": "2025-01-15T10:30:00Z"
          }
        },
        "required": ["id", "chatId", "role", "content", "createdAt"]
      },
      "ChatMessagesResponseDto": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "List of chat messages",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageDto"
            }
          }
        },
        "required": ["messages"]
      },
      "UserProfilesResponseDto": {
        "type": "object",
        "properties": {
          "profiles": {
            "description": "List of user profiles",
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": ["profiles"]
      },
      "RecipientPersonalInfo": {
        "type": "object",
        "properties": {
          "person_name": {
            "type": "string",
            "nullable": true
          },
          "relationship": {
            "type": "string",
            "nullable": true
          },
          "occasion": {
            "type": "string",
            "nullable": true
          },
          "age_range": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RecipientLifestyle": {
        "type": "object",
        "properties": {
          "primary_hobbies": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "daily_routine": {
            "type": "string",
            "nullable": true
          },
          "relaxation_methods": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "work_style": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RecipientPreferences": {
        "type": "object",
        "properties": {
          "home_aesthetic": {
            "type": "string",
            "nullable": true
          },
          "valued_items": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "favorite_beverages": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comfort_foods": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RecipientMediaInterests": {
        "type": "object",
        "properties": {
          "favorite_books": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "must_watch_shows": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "podcasts": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "music_preferences": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RecipientRecentLife": {
        "type": "object",
        "properties": {
          "new_experiences": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mentioned_needs": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recent_achievements": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RecipientGiftContext": {
        "type": "object",
        "properties": {
          "occasion_significance": {
            "type": "string",
            "nullable": true
          },
          "gift_message": {
            "type": "string",
            "nullable": true
          },
          "previous_gift_successes": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RecipientProfileDto": {
        "type": "object",
        "properties": {
          "personal_info": {
            "$ref": "#/components/schemas/RecipientPersonalInfo"
          },
          "lifestyle": {
            "$ref": "#/components/schemas/RecipientLifestyle"
          },
          "preferences": {
            "$ref": "#/components/schemas/RecipientPreferences"
          },
          "media_interests": {
            "$ref": "#/components/schemas/RecipientMediaInterests"
          },
          "recent_life": {
            "$ref": "#/components/schemas/RecipientRecentLife"
          },
          "gift_context": {
            "$ref": "#/components/schemas/RecipientGiftContext"
          }
        },
        "required": [
          "personal_info",
          "lifestyle",
          "preferences",
          "media_interests",
          "recent_life",
          "gift_context"
        ]
      },
      "UserProfileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Profile ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "chatId": {
            "type": "string",
            "description": "Chat ID associated with this profile",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "personName": {
            "type": "string",
            "description": "Name of the person",
            "example": "Mother"
          },
          "profile": {
            "description": "Recipient profile data",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientProfileDto"
              }
            ]
          },
          "keyThemes": {
            "description": "Key themes and keywords",
            "example": ["cooking", "gardening", "relaxation"],
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Profile creation date",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Profile last update date",
            "example": "2023-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "userId",
          "chatId",
          "personName",
          "profile",
          "keyThemes",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatMessageWithAnswersDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique message identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "Hello!"
          },
          "sender": {
            "type": "string",
            "description": "Message sender",
            "enum": ["user", "assistant"],
            "example": "user"
          },
          "potentialAnswers": {
            "description": "Potential answers - either select with 4 options or free text",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PotencialAnswersSelectDto"
              },
              {
                "$ref": "#/components/schemas/PotencialAnswersFreeTextDto"
              }
            ]
          }
        },
        "required": ["id", "content", "sender"]
      },
      "SseChatbotMessageDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["chatbot-message"],
            "example": "chatbot-message"
          },
          "message": {
            "description": "Chat message from the bot",
            "example": {
              "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "content": "Hello!",
              "sender": "user",
              "potentialAnswers": {
                "type": "select",
                "answers": [
                  {
                    "answerFullSentence": "Answer 1",
                    "answerShortForm": "Answer 1 short"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessageWithAnswersDto"
              }
            ]
          }
        },
        "required": ["type", "message"]
      },
      "SseChatInterviewCompletedDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["chat-interview-completed"],
            "example": "chat-interview-completed"
          }
        },
        "required": ["type"]
      },
      "SseChatInappropriateRequestDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["chat-inappropriate-request"],
            "example": "chat-inappropriate-request"
          },
          "reason": {
            "type": "string",
            "description": "Reason why the request was inappropriate",
            "example": "inappropriate content"
          }
        },
        "required": ["type", "reason"]
      },
      "ListingWithIdDto": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "Image URL",
            "example": "https://example.com/image.jpg",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Book"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "example": "Great book"
          },
          "link": {
            "type": "string",
            "description": "Link",
            "example": "https://example.com/book"
          },
          "price": {
            "description": "Price",
            "example": {
              "value": 10,
              "label": "10",
              "currency": "USD",
              "negotiable": false
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceDto"
              }
            ]
          },
          "category": {
            "type": "string",
            "description": "Category",
            "example": "Elektronika",
            "nullable": true
          },
          "provider": {
            "type": "string",
            "description": "Provider/shop name",
            "example": "amazon"
          },
          "listingId": {
            "type": "string",
            "description": "Listing ID from database",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        },
        "required": [
          "image",
          "title",
          "description",
          "link",
          "price",
          "listingId"
        ]
      },
      "SseGiftReadyDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["gift-ready"],
            "example": "gift-ready"
          },
          "data": {
            "description": "Gift ideas payload with listing IDs",
            "example": {
              "giftIdeas": [
                {
                  "listingId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "image": "https://example.com/image.jpg",
                  "title": "Book",
                  "description": "Great book",
                  "link": "https://example.com/book",
                  "price": {
                    "value": 10,
                    "label": "10 USD",
                    "currency": "USD",
                    "negotiable": false
                  },
                  "category": "Muzyka i Edukacja"
                },
                {
                  "listingId": "4ga85f64-5717-4562-b3fc-2c963f66afa7",
                  "image": "https://example.com/image.jpg",
                  "title": "Pen",
                  "description": "Great pen",
                  "link": "https://example.com/pen",
                  "price": {
                    "value": 5,
                    "label": "5 USD",
                    "currency": "USD",
                    "negotiable": false
                  },
                  "category": "Moda"
                }
              ]
            },
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingWithIdDto"
            }
          }
        },
        "required": ["type", "data"]
      }
    }
  }
}
