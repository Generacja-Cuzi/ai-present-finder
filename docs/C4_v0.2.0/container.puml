@startuml C4_Container
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(user, "User", "Person searching for a gift")

System_Boundary(sys, "AI Present Finder System") {
  Container(frontend, "Web Frontend", "React + Vite", "User interface with real-time updates via SSE")
  Container(rest_api, "REST API Macroservice", "NestJS", "HTTP entry point, authentication (JWT + Google OAuth), and SSE fanout for real-time communication")
  Container(stalking_svc, "Stalking Microservice", "NestJS", "Scrapes social media profiles via BrightData and extracts keywords using AI")
  Container(chat_svc, "Chat Microservice", "NestJS", "Conducts AI-driven interviews to gather additional context")
  Container(gift_svc, "Gift Ideas Microservice", "NestJS", "Orchestrates gift recommendation flow")
  Container(fetch_svc, "Fetch Microservice", "NestJS", "Fetches product listings from multiple e-commerce providers")
  Container(reranking_svc, "Reranking Microservice", "NestJS", "Reranks and filters products based on preferences")
  ContainerQueue(rabbitmq, "Message Broker", "RabbitMQ", "Asynchronous event-driven communication")
}

System_Ext(google_oauth, "Google OAuth", "Authentication provider")
System_Ext(openai, "OpenAI", "LLM for chat, analysis, and gift ideas")
System_Ext(brightdata, "BrightData", "Web scraping proxy")
System_Ext(instagram, "Instagram", "Social media")
System_Ext(tiktok, "TikTok", "Social media")
System_Ext(x, "X", "Social media")
System_Ext(allegro, "Allegro", "E-commerce provider")
System_Ext(amazon, "Amazon", "E-commerce provider")
System_Ext(ebay, "eBay", "E-commerce provider")
System_Ext(olx, "OLX", "E-commerce provider")

' User interactions
Rel(user, frontend, "Uses", "HTTPS")
Rel(frontend, rest_api, "Calls REST API", "HTTPS/JSON")
Rel(rest_api, user, "Real-time updates", "SSE")

' Authentication flow
Rel(rest_api, google_oauth, "Validates OAuth code", "HTTPS")

' REST API to message broker
Rel(rest_api, rabbitmq, "Publishes events", "AMQP")
Rel(rabbitmq, rest_api, "Consumes events", "AMQP")

' Stalking flow
Rel(rabbitmq, stalking_svc, "StalkingAnalyzeRequestedEvent", "AMQP")
Rel(stalking_svc, brightdata, "Requests scraping", "HTTPS")
Rel(brightdata, instagram, "Scrapes", "HTTPS")
Rel(brightdata, tiktok, "Scrapes", "HTTPS")
Rel(brightdata, x, "Scrapes", "HTTPS")
Rel(stalking_svc, openai, "Analyzes content", "HTTPS")
Rel(stalking_svc, rabbitmq, "StalkingCompletedEvent", "AMQP")

' Chat flow
Rel(rabbitmq, chat_svc, "ChatStartInterviewEvent", "AMQP")
Rel(chat_svc, openai, "Generates questions", "HTTPS")
Rel(chat_svc, rabbitmq, "ChatQuestionAskedEvent", "AMQP")
Rel(rabbitmq, chat_svc, "ChatUserAnsweredEvent", "AMQP")
Rel(chat_svc, rabbitmq, "ChatInterviewCompletedEvent", "AMQP")

' Gift ideas flow
Rel(rabbitmq, gift_svc, "StalkingCompletedEvent", "AMQP")
Rel(rabbitmq, gift_svc, "ChatInterviewCompletedEvent", "AMQP")
Rel(gift_svc, openai, "Generates gift ideas", "HTTPS")
Rel(gift_svc, rabbitmq, "GiftContextInitializedEvent", "AMQP")
Rel(gift_svc, rabbitmq, "Fetch*Event (Allegro/Amazon/eBay/OLX)", "AMQP")

' Fetch flow
Rel(rabbitmq, fetch_svc, "Fetch*Event", "AMQP")
Rel(fetch_svc, allegro, "Fetches products", "HTTPS/API")
Rel(fetch_svc, amazon, "Fetches products", "HTTPS/API")
Rel(fetch_svc, ebay, "Fetches products", "HTTPS/API")
Rel(fetch_svc, olx, "Fetches products", "HTTPS/API")
Rel(fetch_svc, rabbitmq, "ProductFetchedEvent", "AMQP")

' Reranking flow
Rel(rabbitmq, reranking_svc, "GiftContextInitializedEvent", "AMQP")
Rel(rabbitmq, reranking_svc, "ProductFetchedEvent", "AMQP")
Rel(reranking_svc, rabbitmq, "GiftReadyEvent", "AMQP")

SHOW_LEGEND()
@enduml
